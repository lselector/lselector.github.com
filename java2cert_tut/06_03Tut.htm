<html>















<head>















<title> 6.3) Overloading, overriding, runtime type </title>















<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">















<STYLE TYPE="text/css">















<!--















-->















</STYLE>















<link rel="stylesheet" href="tutor.css"></head>































<body bgcolor="#FFFFFF">

<table width=95% border=0 cellpadding=2 cellspacing=0 style="page-break-before: always">

  <col width=147*> <col width=109*> 

  <tr> 

    <td width=57% height=104> 

      <p><a href= "introj2.htm" ><img src= "btnIndex.jpg"  name="Graphic1" alt="Return to Tutorial Index" align=BOTTOM width=55 height=39 border=0></a><a href= "introj2.htm" ><br>

        <br>

        </a><a href= "index.htm" ><img src= "btnHome.jpg"  name="Graphic2" alt="Back to the home page of this site" align=BOTTOM width=55 height=39 border=0></a> 

      </p>

    </td>

    <td width=43%> 

      <p align=RIGHT><img src= "hat.gif"  name="Graphic3" alt="morterboard" align=BOTTOM width=118 height=113 border=0></p>

    </td>

  </tr>

  <tr> 

    <td width=57% height=11> 

      <h1 align=LEFT>Java2 Certification <br>

        Tutorial </h1>

    </td>

    <td width=43% bgcolor="#ff9900"> 

      <p>&nbsp;</p>

    </td>

  </tr>

</table>

<p> You can discuss this topic with others at <a href= "http://www.jchq.net/discus" >http://www.jchq.net/discus</a><br>

  Read reviews and buy a Java Certification book at <a href= "http://www.jchq.net/bookreviews/jcertbooks.htm" >http://www.jchq.net/bookreviews/jcertbooks.htm</a> 

  <br>

</p>

<hr size=5 noshade>

<h1>6)<font face="GENEVA, HELVETICA, ARIAL, LUCIDA SANS"><b> Overloading, overriding, 















  runtime type and object orientation</b></font> </h1>















<h2>Objective 3) </h2>















<p><font face="Arial, Helvetica">Write code to construct instances of any concrete 















  class including normal top level classes inner classes static inner classes 















  and anonymous inner classes.</font></p>















<h3>Note on this Objective </h3>















<p><i>Some of this material is covered elsewhere, notably in Objective 4.1</i></p>















<h3>Instantiating a class </h3>















<p>Concrete classes are classes that can be instantiated as an object reference 















  (also simply called an object) . Thus an <i>abstract</i> class cannot be instantiated 















  and so an object reference cannot be created. Remember that a class that contains 















  any abstract methods the class itself is abstract and cannot be instantiated. 















  <br>















  <br>















  The key to instantiating a class is the use of the <i>new </i>keyword. This 















  is typically seen as</p>















<pre>Button b = new Button();</pre>















<p>This syntax means that the variable <i>name</i> is of the type Button and contains 















  a reference to an instance of the Button. However although the type of the reference 















  is frequently the same as the type of the class being instantiated, it does 















  not have to be. Thus the following is also legal</p>















<pre>Object b = new Button();</pre>















<p>This syntax indicates that the type of the reference b is Object rather than 















  Button.<br>















  <br>















  The declaration and instantiation need not occur on the same line. Thus can 















  construct an instance of a class thus.</p>















<pre>Button b;
b = new Button();</pre>















<p>Inner classes were added with the release of JDK 1.1. They allow one class 















  to be defined within another. 















<h3>Inner classes </h3>















<p>Inner classes were introduced with the release of JDK 1.1. They allow classes 















  to be defined within other classes, and are sometimes referred to as <i>nested</i> 















  classes. They are used extensively in the new 1.1 event handling model. You 















  will almost certainly get questions about nested classes and scoping on the 















  exam.</p>















<p>Here is a trivial example</p>















<pre>class Nest{
	class NestIn{}
}</pre>















<p>The output when this code is compiled is two <i>class</i> files. One, as you 















  would expect is</p>















<pre>Nest.class</pre>















<p>The other is</p>















<pre>Nest$NestIn.class</pre>















<p>This illustrates that nesting classes is generally a naming convention rather 















  than a new sort of class file. Inner classes allow you to group classes logically. 















  They also have benefits in scoping benefits where you want to have access to 















  variables. 















<h3>Nested top level classes </h3>















<p>A nested top level class is a static member of an enclosing top level class.</p>















<p>Thus to modify the previous trivial example</p>















<pre>class Nest{
	static class NestIn{}
}</pre>















<p>This type of nesting is frequently used simply to group related classes. Because 















  the class is static it does not require an instance of the outer class to exist 















  to instantiate the inner class. 















<h3>Member classes </h3>















<p>I think of a member class as an &quot;ordinary inner class&quot;. A member 















  class is analogous to other members of a class, you must instantiate the outer 















  class before you can create an instance of the inner class. Because of the need 















  to be associated with an instance of the outer class Sun introduced new syntax 















  to allow the simultaneous creation of an instance of the outer class at the 















  same time as the creation of an inner class. This takes the form</p>















<pre>Outer.Inner i = new Outer().new Inner();</pre>















<p>To make sense of the new syntax provided for this try to think of the keyword 















  <i>new</i> as used in the above example as belonging to the current insistence 















  of <i>this,<br>















  <br>















  </i>Thus you could change the line that creates the instance of this to read</p>















<pre>Inner i = this.new Inner();</pre>















<p>Because a member class cannot exist without an instance of the outer class, 















  it can have access to the variables of the outer class. 















<h3>Classes created in methods </h3>















<p>A more correct name for this is a local class, but thinking of them as created 















  in methods gives a good flavour of where you are likely to come across them.</p>















<table width="100%" border="0">















  <tr> 















    <td width="9%"><img src= "key2.gif"  width="106" height="73"















align="bottom" border="0"></td>















    <td width="91%"> 















      <h5><font color="red">local classes can only access final fields or parameters 



        of <br>



        the enclosing method</font></h5>















    </td>















  </tr>















</table>















<p>A local class is visible only within it's code block or method. Code within 















  a local class definition can only use <i>final</i> local variables of the containing 















  block or parameters of the method. You are very likely to get a question on 















  this in the exam.</p>















<h3>Anonymous classes </h3>















<p>Your first reaction to the idea of an anonymous inner class might be &quot;why 















  would you want to do that and how can you refer to it if it doesn't have a name?&quot;<br>















  <br>















  To answer these questions, consider the following.You might be in the situation 















  of constantly having to think up names for instances of classes where the name 















  was self evident. Thus with event handling the two important things to know 















  are the event being handled and the name of the component that the handler is 















  attached to. Giving a name to the instance of the event handling class does 















  not add much value. <br>















  <br>















  As to the question how can you refer to it if it doesn't have a name, well you 















  can't and if you need to refer to it by name you should not create an anonymous 















  class. The lack of a name has an additional side effect in that you cannot give 















  it any constructors.</p>















<table width="100%" border="0">















  <tr> 















    <td width="9%"><img src= "key2.gif"  width="106" height="73"















align="bottom" border="0"></td>















    <td width="91%"> 















      <h5><font color="red">Anonymous classes cannot have constructors</font> 















      </h5>















    </td>















  </tr>















</table>















<p>Here is an example of the creation of an anonymous inner class</p>















<pre>class Nest{
public static void main(String argv[]){
        Nest n = new Nest();
                n.mymethod(new anon(){});
       }
        public void mymethod(anon i){}
}
class anon{}
</pre>















<p>Note how the anonymous class is both declared and defined within the parenthesis 







  of the call to <i>mymethod</i>. 







<hr>







<table width="100%" border="0">















  <tr> 















    <td width="11%"><img src= "Quiz.gif"  width="99" height="101"></td>















    <td width="89%">&nbsp;</td>















  </tr>















</table>















<h1>Questions</h1>















<h5><b>Question 1)</b></h5>















<p><b> </b>Which of the following statements are true?<br>















  <br>















  1) A class defined within a method can only access static methods of the enclosing 















  method<br>















  2) A class defined within a method can only access final variables of the enclosing 















  method<br>















  3) A class defined with a method cannot access any of the fields within the 















  enclosing method<br>















  4) A class defined within a method can access any fields accessible by the enclosing 















  method<br>















</p>















<hr align="CENTER">















<h5><b>Question 2)</b></h5>















<p> <br>















  Which of the following statements are true?<br>















  <br>















  1) An anonymous class cannot have any constructors<br>















  2) An anonymous class can only be created within the body of a method<br>















  3) An anonymous class can only access static fields of the enclosing class<br>















  4) The class type of an anonymous class can be retrieved using the getName method<br>















</p>















<hr align="CENTER">















<h5><b>Question 3)</b></h5>















<p><b> </b>Which of the following statements are true?<br>















  <br>















  1) Inner classes cannot be marked private<br>















  2) An instance of a top level nested class can be created without an instance 















  of its enclosing class<br>















  3) A file containing an outer and an inner class will only produce one .class 















  output file<br>















  4) To create an instance of an member class an instance of its enclosing class 















  is required.</p>















<h1>Answers </h1>















<h5><b>Answer 1)</b></h5>















<p> <br>















  2) A class defined within a method can only access final variables of the enclosing 















  method<br>















  <br>















  Such a class can access parameters passed to the enclosing method</p>















<h5> <br>















  <b>Answer 2)</b></h5>















<p><b> <br>















  </b>1) An anonymous class cannot have any constructors</p>















<h5> <br>















  <b>Answer 3)</b></h5>















<p>2) An instance of a top level nested class can be created without an instance 















  of its enclosing class<br>















  4) To create an instance of an member class an instance of its enclosing class 















  is required.<br>















  <br>















  An inner class gets put into its own .class output file, using the format</p>















<pre>Outer$Inner.class. </pre>















<p>A top level nested class is a static class and thus does not require an instance 















  of the enclosing class. A member class is an ordinary non static class and thus 















  an instance of its enclosing class is required.<br>















  <br>















<hr align="CENTER">















<table border="1" width="100%" height="170">















  <caption><b>Other sources on this topic</b></caption>















  <tr> 















    <td width="100%"><b>The Sun Tutorial<br>















      </b><a href= "http://java.sun.com/docs/books/tutorial/java/more/nested.html" >http://java.sun.com/docs/books/tutorial/java/more/nested.html</a><b><br>















      <br>















      Richard Baldwin<br>















      </b><a href= "http://www.geocities.com/Athens/7077/Java094.htm" >http://www.geocities.com/Athens/7077/Java094.htm</a><b><br>















      <br>















      Jyothi Krishnan on this topic at<br>















      </b><a href= "http://www.geocities.com/SiliconValley/Network/3693/obj_sec6.html#obj21" >http://www.geocities.com/SiliconValley/Network/3693/obj_sec6.html#obj21</a></td>















  </tr>















</table>















<p>Last updated<br>















  13 Jan 2000<br>















  copyright &copy; Marcus Green 2000</p>















<p>&nbsp;</p>















<p>&nbsp;</p>















<p>&nbsp;</p>















</body>















</html>















