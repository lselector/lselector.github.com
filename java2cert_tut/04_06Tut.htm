<html>







<head>







<title>4.6) Event Listeners</title>







<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">















<link rel="stylesheet" href="tutor.css"></head>















<body bgcolor="#FFFFFF">

<table width=95% border=0 cellpadding=2 cellspacing=0 style="page-break-before: always">

  <col width=147*> <col width=109*> 

  <tr> 

    <td width=57% height=104> 

      <p><a href= "introj2.htm" ><img src= "btnIndex.jpg"  name="Graphic1" alt="Return to Tutorial Index" align=BOTTOM width=55 height=39 border=0></a><a href= "introj2.htm" ><br>

        <br>

        </a><a href= "index.htm" ><img src= "btnHome.jpg"  name="Graphic2" alt="Back to the home page of this site" align=BOTTOM width=55 height=39 border=0></a> 

      </p>

    </td>

    <td width=43%> 

      <p align=RIGHT><img src= "hat.gif"  name="Graphic3" alt="morterboard" align=BOTTOM width=118 height=113 border=0></p>

    </td>

  </tr>

  <tr> 

    <td width=57% height=11> 

      <h1 align=LEFT>Java2 Certification <br>

        Tutorial </h1>

    </td>

    <td width=43% bgcolor="#ff9900"> 

      <p>&nbsp;</p>

    </td>

  </tr>

</table>

<p> You can discuss this topic with others at <a href= "http://www.jchq.net/discus" >http://www.jchq.net/discus</a><br>

  Read reviews and buy a Java Certification book at <a href= "http://www.jchq.net/bookreviews/jcertbooks.htm" >http://www.jchq.net/bookreviews/jcertbooks.htm</a> 

  <br>

</p>

<hr size=5 noshade>

<h1><font face="GENEVA, HELVETICA, ARIAL, LUCIDA SANS"><b>4)Language fundamentals</b></font> 



</h1>







<h3><font face="GENEVA, HELVETICA, ARIAL, LUCIDA SANS"><b>Objective 6)</b></font></h3>







<p>Write code to implement listener classes and methods and in listener methods 



  extract information from the event to determine the affected component, mouse 



  position nature and time of the event. State the event classname for any specified 



  event listener interface in the java.awt.event package.</p>



<p><b>Note on this objective</b></p>



<p>This objectivecan seem quite a tall order as there are many different graphical 



  elements that generate different types of event. Thus a mouse will create one 



  sort of event whereas a frame opening or closing will create an altogether different 



  type of event. However much of what is required is memorisation so part of the 



  task is just repetition untill you are familiar with the classes, interfaces 



  and event methods.s</p>







<h3><font face="GENEVA, HELVETICA, ARIAL, LUCIDA SANS"><b>The listener event model</b></font> 



</h3>







<p>To write any useful GUI applications with Java you need to understand the listener 







  classes and how to extract information from the events they process. The Java 







  event handling system changed significantly between versions 1.0x and 1.1. In 







  version 1.0x the event handling code concept was a little like plain C code 







  for windows, i.e. fairly horrible. It required the creation of huge <i>case</i> 







  statements where you would put in code to process a particular event according 







  to parameters. This system is quite easy to understand for trivial examples 







  but does not scale well for larger programs. <br>







  <br>







  I get the impression that the only thing you need to know about the 1.1 exam 







  for the 1.1 or Java2 exam is that the 1.1 approach is not backwardly compatible. 







  In theory, code written for the 1.0x style of event handling should work OK 







  in later versions of the JDK.</p>







<h3><font face="GENEVA, HELVETICA, ARIAL, LUCIDA SANS"><b>The JDK 1.1 event model</b></font> 







</h3>







<p>The Java 1.1 system involves using listener classes that are effectively &quot;attached&quot; 







  to components to process specific events. This lends itself well for GUI builders 







  to generate event handling code. If you examine the code generated by a GUI 







  builders it can seem a little opaque, partly because it tends to involve inner 







  classes created within methods. For the purpose of learning you can treat the 







  event handling classes as top level classes.<br>







  <br>







  One of the complicating factors for event handling is that it is based on Interfaces 







  but is easiest to use with a series of classes known as the <i>Adapter</i> classes, 







  that simply implement the event Interfaces. When you use an interface you need 







  to implement all of its methods, thus direct use of the EventListener interface 







  requires the creation of blank bodies for any unused event handling methods. 







  By using the Adapter classes you only need to create the bodies of event handling 







  methods you actually use.</p>







<p>&nbsp; </p>







<table width="100%" border="0">







  <tr> 







    <td width="13%"><img src= "key2.gif"  width="106" height="73"







align="bottom" border="0"></td>







    <td width="87%"> 



      <h3><font color="red">The adapter classes allow you to use the Listener 







        Interfaces without having<br>







        to create a body for every method.</font> </h3>







    </td>







  </tr>







</table>







<p>One of the most essential events to handle for a stand alone application is 



  the simple ability to shut down an application in response to choosing the <i>close</i> 



  option from the system menu. It may come as a surprise at first that this does 



  not come as a default with a Java AWT Frame. If you create an application that 



  extends Frame, but do not create code to handling closing, you will have to 



  either kill it from the task manager or go back to the command line and hit 



  control-c.</p>







<p>The equivalent <i>Swing</i> component to Frame, JFrame does process closing 







  as a default action, but the certification does not cover the Swing components. 







  As you must do this for the AWT Frame it is a good place to start covering the 







  subject of event handling</p>







<p>The methods for <i>WindowEvent</i> handling are not as intuitive as some of 







  the other Event methods. Thus it is not obvious at first if you need to respond 







  to</p>







<p><i>windowClosed or windowClosing</i></p>







<p>In fact it is the windowClosing method method that needs to be processed. The 







  simplest way to destroy the window is to use</p>







<pre>System.exit(0);</pre>



<p>Thus if you have an application with the main display of a frame you can give 



  it the ability to close itself by creating a class that sub classes the WindowAdapter 



  class and overrides the WindowClosing event with a new version that simply has 



  the line</p>



<p>System.exit(0);</p>



<p>as the body of that method.</p>



<p>Here is an example of a simple application that shows a Frame that will respond 



  by disappearing when you click the System/close menu choice. I</p>







<pre>import java.awt.event.*;  //Make event handling available
import java.awt.*;
public class ShutHello extends Frame{
public static void main(String argv[]){
        ShutHello h = new ShutHello();
    }

    ShutHello(){
        Button b = new Button(&quot;ShutHello&quot;);
        //Create a new instance of the WindowCloser class
        WindowCloser wc = new WindowCloser();
        //Attach that listener to this program
        addWindowListener(wc);
        this.add(b);
        setSize(300,300);
        setVisible(true);
    }
}

class WindowCloser extends WindowAdapter{
        //override one of the methods in the Adapter class
        public void windowClosing(WindowEvent e){
        System.exit(0);
        }
}</pre>







<p>The following example demonstrates how to use the interface classes directly 







  rather than using the Adapter classes that wrap them and eliminate the need 







  for blank method bodies.</p>







<p> The second half of the objective asks you to know the event class name for 
  any event listener interface. The following table lists all of the Listener 
  interfaces along with their methods. Do not be too put off by the apparent number 
  of Interfaces and methods as they fit naturally into fairly intuitive groups 
  based around things you would expect to be able to do with GUI components.</p>







<p>Thus the <i>MouseListener</i> interface offers methods for</p>







<ul>







  <li>







    <div align="left">clicked </div>







  <li>







    <div align="left">pressed </div>







  <li>







    <div align="left">released </div>







  <li>







    <div align="left">entered </div>







  <li>







    <div align="left">exited </div>







</ul>







<p><br>







  If you compare this with event handlers in Visual Basic 5 the only significant 







  area not covered is a set of methods for handling dragdrop events.</p>







<p>The name of the Event class passed to each method is fairly intuitive and based 







  on the name of the Listener class. Thus all of the ActionListener methods take 







  a parameter of ActionEvent, the ComponentListener methods take a ComponentEvent 







  type, ContainerListener takes ComponentEvent etc etc etc.</p>







<p>There are 11 Listener Interfaces in all, but only 7 of them have multiple methods. 







  As the point of the adapters is to remove the need to implement blank methods, 







  Adapters classes are only implemented for these 7 Interfaces.</p>







<p>These are as follows</p>







<ul>







  <li>







    <div align="left">ComponentAdapter </div>







  <li>







    <div align="left">ContainerAdapter </div>







  <li>







    <div align="left">FocusAdapter </div>







  <li>







    <div align="left">KeyAdapter </div>







  <li>







    <div align="left">MouseAdapter </div>







  <li>







    <div align="left">MouseMotionAdapter </div>







  <li>







    <div align="left">WindowAdapter </div>







</ul>







<p class="break" align="left">The following table shows the full list of Event 







  handling interfaces</p>







<p align="center"><br>







<div align="center">







  <table border="1" cellpadding="0" cellspacing="0" width="79%" height="613" bgcolor="#FFCCCC">







    <caption><b>Event Handling Interfaces</b></caption>







    <tr> 







      <td width="23%" height="21" valign="TOP"><font size="2">ActionListener</font></td>







      <td width="47%" height="21" valign="TOP"><font size="2">actionPerformed(ActionEvent)</font></td>







      <td width="30%" height="21" valign="TOP"><font size="2">addActionListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" height="23" valign="TOP"><font size="2">AdjustmentListener</font></td>







      <td width="47%" height="23" valign="TOP"><font size="2">adjustmentValueChanged(AdjustmentEvent)</font></td>







      <td width="30%" height="23" valign="TOP"><font size="2">addAdjustmentListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" valign="TOP"><font size="2">ComponentListener</font></td>







      <td width="47%" valign="TOP"><font size="2">componentHidden(ComponentEvent)<br>







        componentMoved(ComponentEvent)<br>







        componentResized(ComponentEvent)<br>







        componentShown(ComponentEvent)</font></td>







      <td width="30%" valign="TOP"><font size="2">addComponentListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" valign="TOP"><font size="2">ContainerListener</font></td>







      <td width="47%" valign="TOP"><font size="2">componentAdded(ContainerEvent)<br>







        componetRemoved(ContainerEvent)</font></td>







      <td width="30%" valign="TOP"><font size="2">addContainerListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" valign="TOP"><font size="2">FocusListener</font></td>







      <td width="47%" valign="TOP"><font size="2">focusGained(FocusEvent)<br>







        focusLost(FocusEvent)</font></td>







      <td width="30%" valign="TOP"><font size="2">addFocusListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" valign="TOP"><font size="2">ItemListener</font></td>







      <td width="47%" valign="TOP"><font size="2">itemStateChanged(ItemEvent)</font></td>







      <td width="30%" valign="TOP"><font size="2">addItemListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" valign="TOP"><font size="2">KeyListener</font></td>







      <td width="47%" valign="TOP"><font size="2">keyPressed(KeyEvent)<br>







        keyReleased(KeyEvent)<br>







        keyTyped(KeyEvent)</font></td>







      <td width="30%" valign="TOP"><font size="2">addKeyListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" valign="TOP"><font size="2">MouseListener</font></td>







      <td width="47%" valign="TOP"><font size="2">mouseClicked(MouseEvent)<br>







        mouseEntered(MouseEvent)<br>







        mouseExited(MouseEvent)<br>







        mousePressed(MouseEvent)<br>







        mouseReleased(MouseEvent)</font></td>







      <td width="30%" valign="TOP"><font size="2">addMouseListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" valign="TOP"><font size="2">MouseMotionListener</font></td>







      <td width="47%" valign="TOP"><font size="2">mouseDragged(MouseEvent)<br>







        mouseMoved(MouseEvent)</font></td>







      <td width="30%" valign="TOP"><font size="2">addMouseMotionListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" valign="TOP"><font size="2">TextListener</font></td>







      <td width="47%" valign="TOP"><font size="2">textValueChanged(TextEvent)</font></td>







      <td width="30%" valign="TOP"><font size="2">addTextListener()</font></td>







    </tr>







    <tr> 







      <td width="23%" valign="TOP"><font size="2">WindowListener</font></td>







      <td width="47%" valign="TOP"><font size="2">windowActivated(WindowEvent)<br>







        windowClosed(WindowEvent)<br>







        windowClosing(WindowEvent)<br>







        windowDeactivated(WindowEvent)<br>







        windowDeiconified(WindowEvent)<br>







        windowIconified(WindowEvent)<br>







        |windowOpened(WindowEvent)</font></td>







      <td width="30%" valign="TOP"><font size="2">addWindowListener()</font></td>







    </tr>







  </table>







  <hr>







</div>







<table width="100%" border="0">







  <tr> 







    <td width="11%"><img src= "Quiz.gif"  width="99" height="101"></td>







    <td width="89%">&nbsp;</td>







  </tr>







</table>







<h1>Questions</h1>







<h3><b>Question 1)</b></h3>







<p>Which of the following statements are true?</p>







<p>1) For a given component events will be processed in the order that the listeners 







  were added<br>







  2) Using the Adapter approach to event handling means creating blank method 







  bodies for all event methods<br>







  3) A component may have multiple listeners associated with it<br>







  4) Listeners may be removed once added</p>







<p> 







<hr align="CENTER">







<h3><b>Question 2)</b> </h3>







<p></p>







<p>Which of the following are correct event handling methods?</p>







<p><br>







  1) mousePressed(MouseEvent e){}<br>







  2) MousePressed(MouseClick e){}<br>







  3) functionKey(KeyPress k){}<br>







  4) componentAdded(ContainerEvent e){}</p>







<p> 







<hr align="CENTER">







<h3><b>Question 3)</b> </h3>







<p></p>







<p>What will happen when you attempt to compile and run the following code?</p>







<p> 







<pre>import java.awt.*;
import java.awt.event.*;
public class MClick extends Frame implements MouseListener{
public static void main(String argv[]){
	    MClick s = new MClick();
      }
       MClick(){
                this.addMouseListener(this);
        }
        public void mouseClicked(MouseEvent e){
                System.out.println(e.getWhen());
        }
}</pre>







<p>1) Compile time error<br>
  2) Run time error<br>
  3) Compile and at runtime the date and time of each click will be output<br>
  4) Compile and at runtime a timestamp wil be output for each click</p>







<p> 







<hr align="CENTER">







<h3><b>Question 4)</b> </h3>







<p></p>







<p>Which of the following statments are true about event handling?</p>







<p>1) The 1.1 Event model is fully backwardly compatible with the 1.0 event model<br>







  2) Code written for the 1.0x Event handling will run on 1.1 versions of the 







  JVM<br>







  3) The 1.1 Event model is particularly suited for GUI building tools<br>







  4) The dragDrop event handler was added with the 1.1 version of event handling. 







<pre></pre>







<h1>Answers </h1>







<h3><b>Answer 1)</b></h3>







<p> 3) A component may have multiple listeners associated with it<br>







  4) Listeners may be removed once added</p>







<h3> <b>Answer 2)</b></h3>







<p><b> </b>1) mousePressed(MouseEvent e){}<br>







  4) componentAdded(ContainerEvent e){}</p>







<h3> <b>Answer 3)</b></h3>







<p><b> </b>1) Compile time error<br>







  <br>







  Because this code uses the Event listener, bodies must be created for each method 







  in the Listener. <br>







  This code will cause errors warning that MClick is an abstract class.</p>







<h3><b> <br>







  Answer 4)</b></h3>







<p><b> </b>2) Code written for the 1.0x Event handling will run on 1.1 versions 
  of the JVM<br>







  3) The 1.1 Event model is particularly suited for GUI building tools<br>







  <b><br>







  <br>







  </b>Code written for the 1.1 event handling will not work with a 1.0x version 







  of the JVM. I invented the name <i>dragdrop</i> method.</p>







<table border="1" width="100%" height="170">







  <caption><b>Other sources on this topic</b></caption>







  <tr> 







    <td width="100%"><b>The Sun Tutorial<br>







      </b><a href= "http://java.sun.com/docs/books/tutorial/uiswing/events/intro.html" >http://java.sun.com/docs/books/tutorial/uiswing/events/intro.html<br>







      <br>







      </a><b>Richard Baldwin<br>







      </b><a href="http://www.Geocities.com/Athens/7077/Java080.htm#design goals of the jdk 1.1 delegation">http://www.Geocities.com/Athens/7077/Java080.htm#design 







      goals of the jdk 1.1 delegation<br>







      </a><b><br>







      Jyothi Krishnan on this topic at </b><a href="http://www.Geocities.com/Athens/7077/Java080.htm#design goals of the jdk 1.1 delegation"><br>







      </a><a href= "http://www.geocities.com/SiliconValley/Network/3693/obj_sec8.html#obj25" >http://www.geocities.com/SiliconValley/Network/3693/obj_sec8.html#obj25<br>







      <br>







      </a><b>David Reilly</b><a href= "http://www.geocities.com/SiliconValley/Network/3693/obj_sec8.html#obj25" ><br>







      http://www.davidreilly.com/jcb/java107/java107.html</a></td>







  </tr>







</table>







<p>Last updated<br>







  10 Jan 2000<br>



  copyright &copy; Marcus Green 2000</p>







<p>&nbsp;</p>







<h1>&nbsp;</h1>







<p>&nbsp;</p>







<p>&nbsp;</p>







</body>







</html>







