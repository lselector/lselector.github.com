<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
  <title>The Java.io package</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<META name="GENERATOR" content="IBM WebSphere Homepage Builder V4.0.0 for Linux">
<style>

<!--







-->
  </style><link rel="stylesheet" href="tutor.css">
</head>
<body bgcolor="#ffffff">
<P>&nbsp;</P>
<TABLE width="95%" border="0" cellpadding="2" cellspacing="0" style="page-break-before: always">
  <COL width="147*">
  <COL width="109*">
  <TBODY>
    <TR>
      <TD width="57%" height="104">
      <P><A href= "introj2.htm" ><IMG src= "btnIndex.jpg"  name="Graphic1" alt="Return to Tutorial Index" align="BOTTOM" width="55" height="39" border="0"></A><A href= "introj2.htm" ><BR>
      <BR>
      </A><A href= "index.htm" ><IMG src= "btnHome.jpg"  name="Graphic2" alt="Back to the home page of this site" align="BOTTOM" width="55" height="39" border="0"></A></P>
      </TD>
      <TD width="43%">
      <P align="RIGHT"><IMG src= "hat.gif"  name="Graphic3" alt="morterboard" align="BOTTOM" width="118" height="113" border="0"></P>
      </TD>
    </TR>
    <TR>
      <TD width="57%" height="11">
      <H1 align="LEFT">Java2 Certification <BR>
      Tutorial</H1>
      </TD>
      <TD width="43%" bgcolor="#ff9900">
      <P>&nbsp;</P>
      </TD>
    </TR>
  </TBODY>
</TABLE>
<P>You can discuss this topic with others at
<A href= "http://www.jchq.net/discus" >http://www.jchq.net/discus</A><BR>
Read reviews and buy a Java Certification
book at <A href= "http://www.jchq.net/bookreviews/jcertbooks.htm" >http://www.jchq.net/bookreviews/jcertbooks.htm</A><br>
</P>
<hr size="5" noshade>
<h2>11) The java.io package </h2>
<h3>Objective 4)</h3>
<p><font face="Arial, Helvetica, sans-serif">Select valid constructor arguments 
  for subclasses

 from a list of classes in the java.io.package. </font></p>
<p>The emphasis on this objective is to know that constructors are valid.

 The 
  most obvious break in the possible constructors is that the RandomFile

 class 
  does not take a Stream constructor, for more information on RandomAccessFile

 
  see the next section. </p>
<p>These children of classes take instances
of other streams as constructors.

 Thus the
exam might ask you if they could take an
instance of file, a string

 file, a writer
or a path to see if you understand the valid
constructors.

 A valid constructor will be
some kind of stream plus possible other parameters.</p>
<p>The Filtering in these classes allow you to access information more usefully

 
  than a stream of bytes. It might be useful not to worry about the names

 FilterInputStream 
  and FilterOutputStream as it is the Subclasses that

 contain the useful methods. 
  These main subclasses are</p>
<h3>FileInputStream and OutputStream</h3>
<p>The FileInputStream and FileOutputStream
take some kind of File as a constructor.
This

 can be a String containing the file
name, and instance of the File class

 or a
File descriptor. These classes are often
used to construct the first

 step in a chain
of Stream classes. Typically an FileInputStream
will be

 connected to a File and that will
be connected to an instance of InputStreamReader
to

 read text characters. Here is an example
of chaining the FileInputStream

 to the InputStream
reader. This program will print out its own
source code.</p>
<pre>import java.io.*;
public class Fis{
public static void main(String argv[]){
	try{
		FileInputStream in = new FileInputStream("Fis.java");
		InputStreamReader isr = new InputStreamReader(in);
		int ch=0;
		while((ch = in.read())&gt; -1){
			StringBuffer buf = new StringBuffer();	
			buf.append((char)ch);
			System.out.print(buf.toString());
			}
		} catch (IOException e){System.out.println(e.getMessage());}		
	}
}</pre>
<p><br>
It is probably advisable when programming in the "real world" to use 
  the

 InputStreamReader class in this type of situation to allow for easy of internationalisation..

 
  See the GreekReader example in section 11.01 for an example of this.</p>
<h3>BufferedInputStream and BufferedOutputStream</h3>
<p>The Buffered streams are direct descendents
of the Filter streams. They

 read in more
information than is immediately needed into
a buffer. This

 increases efficiency as when
a read occurs it is more likely to be from
memory

 (fast) than from disk (slow). This
buffering means they are particularly

 useful
if you are reading in large amounts of data.
An example might be

 where you are processing
several tens of megabytes of text data. The
BufferedInputStream

 and BufferedOutputStream
take an instance of a stream class as a constructor
but

 may take a size parameter so you can
tune the size of the buffer used.<br>
<br>
Here is an example of using the BufferedInputStream,
note how similar it

 is the the previous example
with InputStreamReader replaced by BufferedInputStream</p>
<pre>import java.io.*;
public class BufIn{
public static void main(String argv[]){
        try{
                FileInputStream fin = new FileInputStream("BufIn.java");
                BufferedInputStream bin = new BufferedInputStream(fin);
                int ch=0;
                while((ch=bin.read())&gt; -1){
                        StringBuffer buf = new StringBuffer();
                        buf.append((char)ch);
                        System.out.print(buf.toString());
                        }
                
                }catch(IOException e){System.out.println(e.getMessage());};
        }
}

</pre>
<h3><br>
DataInputStream and DataOutputStream</h3>
<p><br>
The DataInputStream and OutputStream are
used to read binary representations

 of Java
primitives in a portable way. It gives you
access to a range of

 methods such as readDoble,
readIn that will work the same on different
platforms.

 In JDK1.0 this was one of the
main ways to access unicode text, but has
been

 superceeded by the Reader classes since
JDK 1.1. These classes take an instance

 of
a Stream as a constructor<br>
<br>
The following examples write a single character
to the file system and then

 read it back
and print it to the console.<br>
<br>
<pre>//Write the file
import java.io.*;
	public class Dos{
	public static void main(String argv[]){
	try{ 
		FileOutputStream fos = new FileOutputStream("fos.dat");
		DataOutputStream dos = new DataOutputStream(fos);	
		dos.writeChar('J');	
		}catch(IOException e){System.out.println(e.getMessage());}
	}
}

//Read the file
import java.io.*;
public class Dis{
public static void main(String argv[]){
        try{    
        FileInputStream fis= new FileInputStream("fos.dat");

        DataInputStream dis = new DataInputStream(fis);
        System.out.println(dis.readChar());
        }catch(IOException e){System.out.println(e.getMessage());}
        }
}&nbsp;</pre>
<H3>The File class </H3>
<P>The File class has three constructor versions.
These are<BR>
<BR>
File(String path);<BR>
File(String path, String name)<BR>
File (File dir, String name);<BR>
<BR>
The three are very similar and perform effectivly
the same function. The simple simple String
constructor takes the name of the file in
a single sting. This can be either an absolute
or relative path to the file. The second
version takes the path and file name as separate
Strings and the third option is very similar
to the first except that the first parameter
for the directory has the File type instead
of String.<BR>
</P>
<H3>RandomAccessFile</H3>
<P>The important thing to be aware of with the
constructors for RandomAccessFile is that
it takes two constructor parameters and the
second parameter is a String containing the
file mode. See the next section for details
of how to use RandomAccessFile.</P>
<h1>Questions </h1>
<h4>Question 1)</h4>
<p>Which of the following are valid constructors for the FileInputStream

 class?</p>
<p>1) File<br>
2) String<br>
3) File descriptor<br>
4) RadomAccessFile</p>
<h4>Question 2)</h4>
<p>Which of the following are valid constructors
for the BufferedInputStream

 class?</p>
<p>1) BufferedInputStream(FileInputStream in,
int size)<br>
2) BufferedInputStream(FileInputStream in)<br>
3) BufferedInputStream(FileOutputStream fos)<br>
4) BufferedInputStream(RandomAccessFile ram)</p>
<h4>Question 3</h4>
<p>&nbsp;Which of the following are valid constructors
for the DataOutputStream

 class</p>
<p>1) DataInputStream(FileInputStream in, int
size)<br>
2) DataInputStream(FileInputStream in)<br>
3) DataInputStream(File f)<br>
4) DataInputStream(String s)<br>
<br>
</p>
<h4>Question 4</h4>
<p>Given the following code which of the following statements are true?</p>
<pre>&nbsp;</pre><pre>import java.io.*;
public class Dos{
public static void main(String argv[]){
	FileOutputStream fos = new FileOutputStream("fos.dat");
	DataOutputStream dos = new DataOutputStream(fos);
	BufferedOutputStream bos = new BufferedOutputStream(dos);		
	dos.write('8');
	}
}</pre>
<p>1) The code will not compile<br>
2) No compilation because BufferedOutputStream cannot have a DataOutputStream&nbsp;
 constructor<br>
3) The code will compile and write the byte 8 to the file<br>
4) The code will compile and write the string "8" to the file</p>
<br>
<h4>Question 5)</h4>
<P>Which of the following are valid constructor
parameters?<BR>
1) File (String path);<BR>
2) File(String path, String name)<BR>
3) RandomAccessFile(File)<BR>
4) File(RandomAccesFile name)<BR>
</P>
<H4>Question 6)</H4>
<P><BR>
Given the following code</P>
<PRE>import java.io.*;
public class Ppvg{
public static void main(String argv[]){
        Ppvg p = new Ppvg();    
        p.go();
        }

public void go(){
        try{
                DataInputStream dis = new DataInputStream(System.in);
                dis.read();
                }catch(Exception e){}
        System.out.println(&quot;Continuing&quot;);
        }
}</PRE>
<P><BR>
Which of the following statements are true?<BR>
<BR>
1) The code will compile and pause untill
a key is hit<BR>
2) The code will not compile because System.in
is a static class<BR>
3) The code will compile and run to completion
without output<BR>
4) The code will not compile because System.in
is not a valid constructor for DataInputStream</P>
<h1>Answers</h1>
<h4>Answer to question 1)</h4>
<p>1) File<br>
2) String<br>
3) File descriptor</p>
<h4>Answer to Question 2</h4>
<P>1) BufferedInputStream(FileInputStream in,
int size)<br>
2) BufferedInputStream(FileInputStream in)</P>
<p>It should be fairly obvious that an InputStream
would not take an instance of an outputstream
(option 3) and the RandomAccesFile is not
a stream class (option 4)</p>
<h4>Answer to Question 3&nbsp;</h4>
<p>2) DataInputStream(FileInputStream in)</p>
<h4>Answer to Question 4)</h4>
<p>1) The code will not compile</p>
<P>The code will not compile because there is
no try/catch block. A BufferedOutputStream
may take a DataOutputStream as a constructor.</P>
<H4>Answer to Question 5</H4>
<P>Which of the following are valid constructor
parameters?</P>
<P>1) File (String path);<BR>
2) File(String path, String name)<BR>
  RandomAccessFile must take a mode parameter (see the next section for details 
  of the RandomAccessFile class).<BR>
</P>
<H4>Answer to Question 6)</H4>
<P>1) The code will compile and pause untill
a key is hit<BR>
</P>
<p>&nbsp;
</p>
<h3>Other sources on this topic</h3>
<p><b>The Sun API docs</b><br>
Buffered I/O<br>
<a href= "http://java.sun.com/products/jdk/1.2/docs/api/java/io/BufferedInputStream.html" >http://java.sun.com/products/jdk/1.2/docs/api/java/io/BufferedInputStream.html</a><br>
<a href= "http://java.sun.com/products/jdk/1.2/docs/api/java/io/BufferedOutputStream.html" >http://java.sun.com/products/jdk/1.2/docs/api/java/io/BufferedOutputStream.html</a><br>
<br>
Data I/O streams<br>
<a href= "http://java.sun.com/products/jdk/1.2/docs/api/java/io/DataInputStream.html" >http://java.sun.com/products/jdk/1.2/docs/api/java/io/DataInputStream.html</a><br>
<a href= "http://java.sun.com/products/jdk/1.2/docs/api/java/io/DataOutputStream.html" >http://java.sun.com/products/jdk/1.2/docs/api/java/io/DataOutputStream.html</a><br>
<br>
</p>
<p>Last updated<br>
6 Nov 2000<br>
copyright &copy; Marcus Green 2000<br>
most recent version at www.jchq.net&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;



</p>
<h3>&nbsp;</h3>
<h3>&nbsp; </h3>
</body>
</html>
