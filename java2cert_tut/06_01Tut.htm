<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">







<HTML>















<HEAD>







	<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">







	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows">







	<TITLE>6.1) Overloading and Overriding</TITLE>















<STYLE TYPE="text/css">







<!--







-->







</STYLE>















<link rel="stylesheet" href="tutor.css"></HEAD>















<BODY bgcolor="#FFFFFF">

<table width=95% border=0 cellpadding=2 cellspacing=0 style="page-break-before: always">

  <col width=147*> <col width=109*> 

  <tr> 

    <td width=57% height=104> 

      <p><a href= "introj2.htm" ><img src= "btnIndex.jpg"  name="Graphic1" alt="Return to Tutorial Index" align=BOTTOM width=55 height=39 border=0></a><a href= "introj2.htm" ><br>

        <br>

        </a><a href= "index.htm" ><img src= "btnHome.jpg"  name="Graphic2" alt="Back to the home page of this site" align=BOTTOM width=55 height=39 border=0></a> 

      </p>

    </td>

    <td width=43%> 

      <p align=RIGHT><img src= "hat.gif"  name="Graphic3" alt="morterboard" align=BOTTOM width=118 height=113 border=0></p>

    </td>

  </tr>

  <tr> 

    <td width=57% height=11> 

      <h1 align=LEFT>Java2 Certification <br>

        Tutorial </h1>

    </td>

    <td width=43% bgcolor="#ff9900"> 

      <p>&nbsp;</p>

    </td>

  </tr>

</table>

<p> You can discuss this topic with others at <a href= "http://www.jchq.net/discus" >http://www.jchq.net/discus</a><br>

  Read reviews and buy a Java Certification book at <a href= "http://www.jchq.net/bookreviews/jcertbooks.htm" >http://www.jchq.net/bookreviews/jcertbooks.htm</a> 

  <br>

</p>

<hr size=5 noshade>

<h1><B>6)Overloading overriding runtime type and object orientation</B></h1>







<H3>Objective 1)</H3>







<P>State the benefits of encapsulation in object oriented design and write code that implements tightly encapsulated







classes and the relationships &quot;is a&quot; and &quot;has a&quot;.</P>







<H3>&quot;<I>Is a</I>&quot; vs &quot;<I>has a</I>&quot; relationship</H3>







<P>This is a very basic OO question and you will probably get a question on it in the exam. Essentially it seeks







to find out if you understand when something is referring the type of class structure that an object belongs to







and when it refers to a method or field that a class has.<BR>







<BR>







Thus a cat IS A type of animal and a cat HAS a tail. Of course the distinction can be blurred. If you were a zoologist







and knew the correct names for groups of animal types you might say a cat IS A&nbsp;<BR>







<BR>







<I>longlatinwordforanimalgroupwithtails.<BR>







<BR>







</I>but for the purpose of the exam this is not a consideration.<BR>







<BR>







The exam questions tend to be of the type whereby you get a text description of a potential hierarchy and you get







questions as to what ought to be a field and what ought to be a new class type as a child. These questions can







look complex at first glance, but if you read them carefully they are fairly obvious.</P>







<H3>Encapsulation</H3>







<P>The Java 1.1 objectives did not specifically mention encapsulation, though 







  you would be hard pressed to study Java and not come across the concept. Encapsulation 







  involves separating the interface of a class from its implementation. This means 







  you can't &quot;accidentally&quot; corrupt the value of a field, you have to 







  use a method to change a value.</P>







<table width="100%" border="0">







  <tr> 







    <td width="9%"><img src= "key2.gif"  width="106" height="73"







align="bottom" border="0"></td>







    <td width="91%"> 







      <h4><font color="red">Encapsulation involves hiding data of a class and 







        allowing access only through a public interface.</font> </h4>







    </td>







  </tr>







</table>







<P>To do this usually involves the creation of private variables (fields) where 







  the value is updated and retrieved via methods. The standard naming convention 







  for these methods is</P>















<UL>







  <LI>







    <div align="left">setFieldName </div>







  <LI>







    <div align="left">getFieldName </div>







</UL>















<P>For example if you were changing the Color of a shape you might create a method pair in the form</P>







<PRE>public void setColor(Color c){
    cBack = c;
    }
public Color getColor(){
   return cBack;
    }</PRE>







<P>The main access control keywords for variables are</P>















<UL>







  <LI>







    <div align="left">public </div>







  <LI>







    <div align="left">private </div>







  <LI>







    <div align="left">protected </div>







</UL>















<P>Do not be mislead into thinking that the access control system is to do with security. It is not designed to







prevent a programmer getting at variables, it is to help avoid unwanted modification.</P>







<P>The standard approach using the Color example above would be for the Color field <I>cBack</I> to be private.







A private field is only visible from within the current class. This means a programmer cannot accidentally write







code from another class that changes the value. This can help to reduce the introduction of bugs.</P>







<P>The separation of interface and implementation makes it easier to modify the code within a class without breaking







any other code that uses it.</P>















<P>For the class designer this leads to the ability to modify a class, knowing that it will not break programs







that use it. A class designer can insert additional checking routines for &quot;sanity checks&quot; for the modification







of fields. I have worked on insurance projects where it was possible for clients to have an age of less than zero.







If such a value is stored in a simple field such as an integer, there is no obvious place to store checking routines.







If the age were only accessible via <I>set</I> and <I>get</I> methods it will be possible to insert checks against







zero or negative ages in such a way that it will not break existing code. Of course as development continues more







situations may be discovered that need checking against.</P>















<P>For the end user of the class it means they do not have to understand how the internals work and are presented







with a clearly defined interface for dealing with data. The end user can be confident that updates to the class







code will not break their existing code.</P>







<H3><B>Runtime type</B></H3>







<P>Because polymorphism allows for the selection of which version of a method executes at runtime, sometimes it







is not obvious which method will be run. Take the following example.</P>







<PRE>class Base {
int i=99;
public void amethod(){
        System.out.println(&quot;Base.amethod()&quot;);
        }</PRE>







<PRE>}

public class RType extends Base{
int i=-1;
        public static void main(String argv[]){
        Base b = new RType();//&lt;= Note the type
        System.out.println(b.i);
        b.amethod();
        }
        public void amethod(){
                System.out.println(&quot;RType.amethod()&quot;);
        }

}</PRE>







<P>Note how the type of the reference is <I>b</I> <I>Base</I> but the type of actual class is <I>RType</I>. The







call to <I>amethod</I> will invoke the version in <I>RType</I> but the call to output <I>b.i</I> will reference







the field <I>i</I> in the <I>Base</I> class.</P>







<PRE></PRE>







<P>







<HR ALIGN="CENTER" SIZE="4" noshade>







<TABLE BORDER="0" WIDTH="100%">







	<TR>







		<TD WIDTH="11%">







			<P><IMG SRC= "Quiz.gif"  WIDTH="99" HEIGHT="101" ALIGN="BOTTOM" BORDER="0">







		</TD>







		<TD WIDTH="89%">







			<P>&nbsp;







		</TD>







	</TR>







</TABLE>























<h4><b>Question 1)</b></h4>







<p><b> <br>







  </b>Consider you have been given the following design<br>







  <br>







  &quot;A person has a name, age, address and sex. You are designing a class to 







  represent a type of person called a patient. This kind of person may be given 







  a diagnosis, have a spouse and may be alive&quot;. Given that the person class 







  has already been created, what of the following would be appropriate to include 







  when you design the patient class?</p>







<p><br>







  1) registration date<br>







  2) age<br>







  3) sex<br>







  4)diagnosis







<p><br>







<h4><b>Question 2)</b> </h4>







<p></p>







<p>What will happen when you attempt to compile and run the following code?</p>







<pre>class Base {
int i=99;
public void amethod(){
        System.out.println(&quot;Base.amethod()&quot;);
        }
        Base(){
             amethod();
        }

}

public class RType extends Base{
int i=-1;
        public static void main(String argv[]){
        Base b = new RType();
        System.out.println(b.i);
        b.amethod();
        }
        public void amethod(){
                System.out.println(&quot;RType.amethod()&quot;);
        }
}

1)</pre>







<pre>RType.amethod
-1
RType.amethod</pre>







<p>2)</p>







<pre>RType.amethod
99
RType.amethod</pre>







<p><b><br>







  </b>3)</p>







<pre>99
RType.amethod</pre>







<p>4)</p>







<pre>Compile time error</pre>







<p> 







<h4><b>Question 3)</b></h4>







<p>Your chief Software designer has shown you a sketch of the new Computer parts 







  system she is about to create. At the top of the hierarchy is a Class called 







  Computer and under this are two child classes. One is called LinuxPC and one 







  is called WindowsPC. The main difference between the two is that one runs the 







  Linux operating System and the other runs the Windows System (of course another 







  difference is that one needs constant re-booting and the other runs reliably). 







  Under the WindowsPC are two Sub classes one called Server and one Called Workstation. 







  How might you appraise your designers work? </p>







<p><br>







  1) Give the goahead for further design using the current scheme<br>







  2) Ask for a re-design of the hierarchy with changing the Operating System to 







  a field rather than Class type<br>







  3) Ask for the option of WindowsPC to be removed as it will soon be obsolete<br>







  4) Change the hierarchy to remove the need for the superfluous Computer Class.</p>







<p> 







<h4><b>Question 4)</b></h4>







<p><b> </b>Given the following class </p>







<pre>class Base{
	int Age=33;
}</pre>







<p>How might you change improve the class with respect to accessing the field 







  Age?</p>







<p>1) Define the variable Age as private<br>







  2) Define the variable Age as protected<br>







  3) Define the variable Age as private and create a get method that returns it 







  and a set method that updates it<br>







  4) Define the variable Age as protected and create a set method that returns 







  it and a get method that updates it</p>







<h4><b>Question 5)</b></h4>







<p>Which of the following are benefits of encapsulation</p>







<p>1) All variables can be manipulated as Objects instead of primitives<br>







  2) by making all variables protected they are protected from accidental corruption<br>







  3) The implementation of a class can be changed without breaking code that uses 







  it<br>







  4) Making all methods protected prevents accidental corruption of data</p>







<h4><b>Question 6)</b></h4>







<p>Name three principal characteristics of Object Oriented programming?</p>







<p>1) encapsulation, dynamic binding, polymorphism<br>







  2) polymorphism, overloading, overriding<br>







  3) encapsulation, inheritance, dynamic binding<br>







  4) encapsulation, inheritance, polymorphism</p>







<h4><b>Question 7)</b></h4>







<p>How can you implement encapsulation in a class</p>







<p>1) make all variables protected and only allow access via methods<br>







  2) make all variables private and only allow access via methods<br>







  3) ensure all variables are represented by wrapper classes<br>







  4) ensure all variables are accessed through methods in an ancestor class 







<h1>Answers</h1>







<h4><b>Answer 1)</b></h4>







<p><b> <br>







  </b>1) registration date<b><br>







  </b>4) diagnosis<br>







  <br>







  Registration date is a reasonable additional field for a patient, and the design 







  specifically says that a patient should have a diagnosis. As the patient is 







  a type of person, it should have the fields age and sex available (assuming 







  they were not declared to be private).</p>







<h4> <br>







  <b>Answer 2)</b></h4>







<p> 2)</p>







<pre>RType.amethod 
99
RType.amethod
</pre>







<p> If this answer seems unlikley, try compiling and running the code. The reason 
  is that this code creates an instance of the RType class but assigns it to a 
  reference of a the Base class. In this situation a reference to any of the fields 
  such as i will refer to the value in the Base class, but a call to a method 
  will refer to the method in the class type rather than its reference handle. 
</p>







<h4> <b>Answer 3) </b></h4>







<p> <br>







  2) Ask for a re-design of the hierarchy with changing the Operating System to 







  a field rather than Class type</p>







<h4> <br>







  <b>Answer 4)</b></h4>







<p><b> </b>3) Define the variable Age as private and create a <i>get</i> method 







  that returns it and a <i>set</i> method that updates it</p>







<h4> <br>







  <b>Answer 5)</b></h4>







<p><b> <br>







  </b>3) The implementation of a class can be changed without breaking code that 







  uses it</p>







<h4> <br>







  <b>Answer 6)</b></h4>







<p><b> <br>







  </b>4) encapsulation, inheritance, polymorphism<b><br>







  <br>







  </b>I got this question at a job interview once. I got the job. Can't be certain 







  you will get anything similar in the exam, but its handy to know.</p>







<h4> <br>







  <b>Answer 7)</b></h4>







<p><b> <br>







  </b>2) make all variables private and only allow access via methods </p>







<table border="1" width="7100%">







  <caption><b>Other sources on this topic</b></caption>







  <tr> 







    <td width="100%"><b>This topic is covered in the Sun Tutorial at </b><br>







      <a href= "http://java.sun.com/docs/books/tutorial/java/concepts/index.html" >http://java.sun.com/docs/books/tutorial/java/concepts/index.html</a><br>







      <br>







      <b>Richard Baldwin Covers this topic at<br>







      </b><a href= "http://www.geocities.com/Athens/Acropolis/3797/Java004.htm#an initial description of oop" >http://www.Geocities.com/Athens/Acropolis/3797/Java004.htm#an 







      initial description of oop<br>







      </a>(This is general stuff on OOP rather than concentrating on &quot;is 







      a&quot; &quot;has a&quot;)<b><br>







      <br>







      Jyothi Krishnan on this topic at<br>







      </b><a href= "http://www.geocities.com/SiliconValley/Network/3693/obj_sec6.html#obj19" >http://www.geocities.com/SiliconValley/Network/3693/obj_sec6.html#obj19<br>







      <br>







      </a><b>Java 1.1 Unleashed</b><br>







      <a href= "http://www.geocities.com/SiliconValley/Network/3693/obj_sec6.html#obj19" >http://www.itlibrary.com/reference/library/1575212986/htm/ch05.htm<br>







      </a>(See the section on encapsulation)<a href= "http://www.geocities.com/SiliconValley/Network/3693/obj_sec6.html#obj19" ></a></td>







  </tr>







</table>







<p>Last updated<br>







  11 Jan 2000<br>



  copyright &copy; Marcus Green 2000</p>







</BODY>















</HTML>